#!/usr/bin/python
# -*- encoding: utf-8; py-indent-offset: 4 -*-

# (c) 2017 Heinlein Support GmbH
#          Robert Sander <r.sander@heinlein-support.de>

# This is free software;  you can redistribute it and/or modify it
# under the  terms of the  GNU General Public License  as published by
# the Free Software Foundation in version 2.  This file is distributed
# in the hope that it will be useful, but WITHOUT ANY WARRANTY;  with-
# out even the implied warranty of  MERCHANTABILITY  or  FITNESS FOR A
# PARTICULAR PURPOSE. See the  GNU General Public License for more de-
# ails.  You should have  received  a copy of the  GNU  General Public
# License along with GNU Make; see the file  COPYING.  If  not,  write
# to the Free Software Foundation, Inc., 51 Franklin St,  Fifth Floor,
# Boston, MA 02110-1301 USA.

factory_settings['apachecount_default_levels'] = {
    'sum': False,
    'codes': []
}

def inventory_apachecount(checkname, info):
    if opt_debug:
        print 'checkname = %s' % pprint.pformat(checkname)
        print 'info = %s' % pprint.pformat(info)
    if len(info) > 1:
        return [(None, {})]

def check_apachecount(item, params, info):
    if opt_debug:
        print 'item = %s' % pprint.pformat(item)
        print 'params = %s' % pprint.pformat(params)
        print 'info = %s' % pprint.pformat(info)
    perfdata = []
    msg = []
    res = 0
    this_time = int(time.time())
    summarize = params['sum']
    requests = {}

    rateinfo = {'unit': ' requests/s',
                'msg': lambda item, rate: '%.2f code %d/s' % (rate, item) }
    if summarize:
        perfname = 'apachecount_http_sum_%d'
    else:
        perfname = 'apachecount_http_%d'

    for line in info:
        item = 0
        count = 0
        rate = 0
        has_no_param = True
        if line[0].startswith('http_'):
            item = saveint(line[0][5:])
            count = saveint(line[1])
            if summarize:
                requests[item] = count
            else:
                requests[item] = get_rate(perfname % item, this_time, count)

    if summarize:
        for item in requests.keys():
            hundred = item / 100 * 100
            if item != hundred:
                if hundred in requests:
                    requests[hundred] += requests[item]
                else:
                    requests[hundred] = requests[item]
                del(requests[item])
        for item, count in requests.iteritems():
            requests[item] = get_rate(perfname % item, this_time, count)

    for item, rate in requests.iteritems():
        for code, param in params['codes']:
            if item == code:
                has_no_param = False
                if type(param) == tuple:
                    perfdata.append((perfname % item, rate, param[0], param[1]))
                else:
                    perfdata.append((perfname % item, rate))
                if param:
                    state, text, perf = check_levels(rate, perfname % item, param, unit=rateinfo['unit'])
                    if opt_debug:
                        print "%s state = %s" % (item, pprint.pformat(state))
                        print "%s text = %s" % (item, pprint.pformat(text))
                        print "%s perf = %s" % (item, pprint.pformat(perf))
                    if state > res:
                        res = state
                    msg.append('%s%s' % (rateinfo['msg'](item, rate), text))
                    perfdata += perf
                else:
                    msg.append(rateinfo['msg'](item, rate))
        if has_no_param:
            msg.append(rateinfo['msg'](item, rate))
            perfdata.append((perfname % item, rate))
    if opt_debug:
        pprint.pprint(perfdata)
    return (res, ", ".join(msg), perfdata)

check_info['apachecount'] = {
    'check_function':      check_apachecount,
    'service_description': "Apache Request Statistics",
    'has_perfdata':        True,
    'inventory_function':  inventory_apachecount,
    'group':               'apachecount',
    'default_levels_variable': 'apachecount_default_levels',
}
