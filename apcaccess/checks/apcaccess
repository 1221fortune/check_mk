#!/usr/bin/env python
# -*- encoding: utf-8; py-indent-offset: 4 -*-

# (c) Robert Sander <r.sander@heinlein-support.de>

# This is free software;  you can redistribute it and/or modify it
# under the  terms of the  GNU General Public License  as published by
# the Free Software Foundation in version 2.  check_mk is  distributed
# in the hope that it will be useful, but WITHOUT ANY WARRANTY;  with-
# out even the implied warranty of  MERCHANTABILITY  or  FITNESS FOR A
# PARTICULAR PURPOSE. See the  GNU General Public License for more de-
# ails.  You should have  received  a copy of the  GNU  General Public
# License along with GNU Make; see the file  COPYING.  If  not,  write
# to the Free Software Foundation, Inc., 51 Franklin St,  Fifth Floor,
# Boston, MA 02110-1301 USA.

def parse_apcaccess(info):
    parsed = {}
    instance = False
    for line in info:
        if line[0].startswith("[["):
            instance = line[0][2:-2]
            parsed[instance] = {}
        elif instance:
            if cmk.debug.enabled():
                pprint.pprint(line)
            parsed[instance][line[0]] = line[1]
    return parsed

def inventory_apcaccess(parsed):
    for instance in parsed:
        yield instance, {}

def check_apcaccess(item, params, parsed):
    if cmk.debug.enabled():
        pprint.pprint(item)
        pprint.pprint(parsed)
    if item in parsed:
        data = parsed[item]
        perfdata = [
            ( 'voltage', savefloat(data.get('OUTPUTV').split(' ')[0]) ),
            ( 'output_load', savefloat(data.get('LOADPCT').split(' ')[0]) ),
            ( 'battery_capacity', savefloat(data.get('BCHARGE').split(' ')[0]) ),
            ( 'timeleft', savefloat(data.get('TIMELEFT').split(' ')[0]) * 60 ),
            ]
        yield 0, ", ".join([data.get('UPSNAME'), data.get('MODEL'), data.get('SERIALNO'), data.get('FIRMWARE')]), perfdata
        if data.get('STATUS') != 'ONLINE' and data.get('SELFTEST') == 'NO':
            yield 2, 'Status is ' + data.get('STATUS')

check_info["apcaccess"] = {
    "parse_function"          : parse_apcaccess,
    "check_function"          : check_apcaccess,
    "inventory_function"      : inventory_apcaccess,
    "service_description"     : "APC %s Status",
    "has_perfdata"            : True,
}

factory_settings["apcaccess_temp_default"] = {
    "levels"    : (40, 50),
}

def inventory_apcaccess_temp(parsed):
    for instance in parsed:
        yield instance, {}    

def check_apcaccess_temp(item, params, parsed):
    if item in parsed:
        return check_temperature(savefloat(parsed[item].get('ITEMP').split(' ')[0]),
                                 params,
                                 'apcaccess_temp.%s' % item,
                                 dev_unit=parsed[item].get('ITEMP').split(' ')[1].lower())

check_info["apcaccess.temperature"] = {
    "check_function"         : check_apcaccess_temp,
    "inventory_function"     : inventory_apcaccess_temp,
    "service_description"    : "APC %s Temperature",
    "has_perfdata"           : True,
    "default_levels_variable": "apcaccess_temp_default",
    "group"                  : "temperature",
    "includes"               : [ "temperature.include" ],
}
