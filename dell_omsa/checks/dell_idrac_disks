#!/usr/bin/python
# -*- encoding: utf-8; py-indent-offset: 4 -*-

def inventory_dell_idrac_disks(info):
    return [ (x[10] , None) for x in info ]

def check_dell_idrac_disks(item, _no_params, info):
    #State definitions. Found in check_openmange from Trond H. Amundsen
    spare_state = {
         1 : 'not a spare',
         2 : 'dedicated hot spare',
         3 : 'global hot spare',
    }

    media_type = {
         1 : 'Unknown',
         2 : 'HDD',
         3 : 'SSD',
    }

    bus_type = {
         1 : 'Unknown',
         2 : 'SCSI',
         3 : 'SAS',
         4 : 'SATA',
         6 : 'FC',
    }

    pdisk_state = {
         1  : 'Unknown',
         2  : 'Ready',
         3  : 'Online',
         4  : 'Foreign',
         5  : 'Offline',
         6  : 'Blocked',
         7  : 'Failed',
         8  : 'Non-raid',
         9  : 'Removed',
    }

    for name, dstate, pid, eid, cid, tid, sizeMB, btype, sstate, mt, ditem  in info:
        if ditem == item:
            state = 0
            dstate = saveint(dstate)
            btype = saveint(btype)
            sstate = saveint(sstate)
            mt = saveint(mt)
            size = saveint(sizeMB)*1024*1024
            msg = ["%s (%s, %s)" % ( name, pid, get_bytes_human_readable(size) ) ]
            label = ""
            if dstate in [ 4, 1 ]:
                state = 1
                label = "(!)"
            elif dstate not in [ 3, 2 ]:
                state = 2
                label = "(!!)"
            msg.append("state %s%s" % ( pdisk_state.get(dstate, 'ukn (%s)' % dstate ), label ))
            msg.append("Bus Type: %s" % bus_type.get(btype,'unk (%s)' % btype) )

            # handle global hot spares as OK
            if sstate == 3 and dstate == 1:
                state = 0
                label = ""
            if sstate != 5:
                msg.append("Spare State: %s" % spare_state.get(sstate, 'ukn (%s)' %sstate ))
            if mt != 0:
                msg.append("Media Type: %s" % media_type.get(mt,'ukn (%s)' % mt ))

            return state, ", ".join(msg)
    return 3, "Device not found in SNMP tree"

check_info["dell_idrac_disks"] = {
    "check_function"        : check_dell_idrac_disks,
    "inventory_function"    : inventory_dell_idrac_disks,
    "service_description"   : "iDRAC Physical Disk %s",
    "has_perfdata"          : False,
    "snmp_scan_function"    : lambda oid: oid('.1.3.6.1.4.1.674.10892.5.5.1.20.130.4.1.1.1'),
    "snmp_info"             : ( ".1.3.6.1.4.1.674.10892.5.5.1.20.130.4.1", [
        2, # arrayDiskName
        4, # arrayDiskState
        6, # arrayDiskProductID
        9, # arrayDiskEnclosureID
        10, # arrayDiskChannel
        15, # arrayDiskTargetID
        11, # arrayDiskLengthInMB
        21, # arrayDiskBusType
        22, # arrayDiskSpareState
        #24, #arrayDiskComponentStatus
        #31, #arrayDiskSmartAlertIndication
        35, # arrayDiskMediaType
        1, # physicalDiskNumber
    ]),
}

