#!/usr/bin/python
# -*- encoding: utf-8; py-indent-offset: 4 -*-

def inventory_dell_idrac_processors(info):
    return [(x[0], None) for x in info if x[1] != '4' and x[0] != '' ]

def check_dell_idrac_processors(item, _no_params, info):
    #Probetypes found in check_openmanage3.pl
    cpu_states = {
         1 : 'Other',         # other than following values
         2 : 'Unknown',       # unknown
         3 : 'Enabled',       # enabled
         4 : 'User Disabled', # disabled by user via BIOS setup
         5 : 'BIOS Disabled', # disabled by BIOS (POST error)
         6 : 'Idle',          # idle
    }

    cpu_readings = {
	 0    : 'Unkown',
         1    : 'Internal Error',      # Internal Error
         2    : 'Thermal Trip',        # Thermal Trip
         32   : 'Configuration Error', # Configuration Error
         128  : 'Present',             # Processor Present
         256  : 'Disabled',            # Processor Disabled
         512  : 'Terminator Present',  # Terminator Present
         1024 : 'Throttled',           # Processor Throttled
    }

    for index, status, manuf, status2, reading, brand in info:
        if index == item:
            state = 0
            if not status:
                status = status2
	    status = saveint(status)
	    reading = saveint(reading)
            msg = "%s State: %s, Reading: %s" % \
            (brand, cpu_states.get(status, 'ukn (%s)' % status ), cpu_readings.get(reading, 'ukn(%s)' % reading))
            if status != 3:
                state = 2
            if reading in [ 1, 32 ]:
                state = 2
            return state, msg

    return 2, "Processor not found"

check_info["dell_idrac_processors"] = {
    "check_function"        : check_dell_idrac_processors,
    "inventory_function"    : inventory_dell_idrac_processors,
    "service_description"   : "iDRAC Processor %s",
    "has_perfdata"          : False,
    # There is no other way to find out that openmanage is present.
    "snmp_scan_function"    : lambda oid: oid('.1.3.6.1.4.1.674.10892.5.4.1100.30.1.1.1.1'),
    "snmp_info"             : ( ".1.3.6.1.4.1.674.10892.5.4.1100", [
        "30.1.2", # Index
        "30.1.5", # Device Status
        "30.1.8", # Manufacturerer Name
        "30.1.9", # DeviceStatus State
        "32.1.6", # Deive Status reading
        "30.1.23", # processorDeviceBrandName
        ]),
}

