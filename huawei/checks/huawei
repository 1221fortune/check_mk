#!/usr/bin/python
# -*- encoding: utf-8; py-indent-offset: 4 -*-

# (c) 2016 Heinlein Support GmbH
#          Robert Sander <r.sander@heinlein-support.de>

#
# This is free software;  you can redistribute it and/or modify it
# under the  terms of the  GNU General Public License  as published by
# the Free Software Foundation in version 2.  check_mk is  distributed
# in the hope that it will be useful, but WITHOUT ANY WARRANTY;  with-
# out even the implied warranty of  MERCHANTABILITY  or  FITNESS FOR A
# PARTICULAR PURPOSE. See the  GNU General Public License for more de-
# ails.  You should have  received  a copy of the  GNU  General Public
# License along with GNU Make; see the file  COPYING.  If  not,  write
# to the Free Software Foundation, Inc., 51 Franklin St,  Fifth Floor,
# Boston, MA 02110-1301 USA.

import pprint

huawei_health_states = {
    '0': '--',
    '1': 'normal',
    '2': 'fault',
    '3': 'preFail',
    '4': 'partiallyBroken',
    '5': 'degraded',
    '6': 'badSectorsFound',
    '7': 'bitErrorsFound',
    '8': 'consistent',
    '9': 'inconsistent',
    '10': 'busy',
    '11': 'noInput',
    '12': 'lowBattery',
    '13': 'singleLinkFault',
    '14': 'invalid',
    '15': 'write protect',
}

huawei_running_states = {
    '0': '--',
    '1': 'normal',
    '2': 'running',
    '3': 'not running',
    '4': 'not existed',
    '5': 'sleep in high temperature',
    '6': 'starting',
    '7': 'power failure protecting',
    '8': 'spin down',
    '9': 'started',
    '10': 'link up',
    '11': 'link down',
    '12': 'powering on',
    '13': 'powered off',
    '14': 'precopy',
    '15': 'copyback',
    '16': 'reconstruction',
    '17': 'expansion',
    '18': 'unformatted',
    '19': 'formatting',
    '20': 'unmapped',
    '21': 'initial synchronizing',
    '22': 'consistent',
    '23': 'synchronizing',
    '24': 'synchronized',
    '25': 'unsynchronized',
    '26': 'splited',
    '27': 'online',
    '28': 'offline',
    '29': 'locked',
    '30': 'enabled',
    '31': 'disabled',
    '32': 'balancing',
    '33': 'to be recoverd',
    '34': 'interrupted',
    '35': 'invalid',
    '36': 'not start',
    '37': 'queuing',
    '38': 'stopped',
    '39': 'copying',
    '40': 'completed',
    '41': 'paused',
    '42': 'reverse synchronizing',
    '43': 'activated',
    '44': 'restore',
    '45': 'inactive',
    '46': 'idle',
    '47': 'powering off',
    '48': 'charging',
    '49': 'charging completed',
    '50': 'discharging',
    '51': 'upgrading',
    '63': 'running normal',
    '64': 'running fail',
    '65': 'running success',
    '66': 'Running success',
    '67': 'Running failed',
    '68': 'Waiting',
    '69': 'Canceling',
    '70': 'Canceled',
    '71': 'About to synchronize',
    '72': 'Synchronizing data',
    '73': 'Failed to synchronize',
    '74': 'Fault',
    '75': 'Migrating',
    '76': 'Migrated',
    '77': 'Activating',
    '78': 'Deactivating',
    '79': 'Start failed',
    '80': 'Stop failed',
    '81': 'Decommissioning',
    '82': 'Decommissioned',
    '83': 'Recommissioning',
    '84': 'Replacing node',
    '85': 'Scheduling',
    '86': 'Pausing',
    '87': 'Suspending',
    '88': 'Suspended',
    '89': 'Overload',
    '90': 'To be switch',
    '91': 'Switching',
    '92': 'To be cleanup',
    '93': 'Forced start',
    '94': 'Error',
}

huawei_port_states = {
    '0': 'link down',
    '1': 'link up',
    '2': 'not exist',
    '3': 'link bad',
    '4': 'hardware error',
    '5': 'speed no match',
    '6': 'enable',
    '7': 'disable',
    '8': 'mac error',
    '9': 'lane no match',
}

huawei_port_rates = {
    '-1': 'unknown',
    '0': 'auto',
    '1': '1 Gbit/s',
    '2': '2 Gbit/s',
    '4': '4 Gbit/s',
    '8': '8 Gbit/s',
    '12': '12 Gbit/s',
    '16': '16 Gbit/s',
}

huawei_port_modes = {
    '-1': 'unknown',
    '1': 'fabric',
    '2': 'public-loop',
    '3': 'point-to-point',
}

huawei_port_logictypes = {
    '1': 'service',
    '2': 'ibc',
    '3': 'ibs',
    '4': 'expansion',
    '5': 'management',
    '6': 'upsmanagement',
    '8': 'maintenance',
}

def huawei_port_index(portid):
    portid = saveint(portid)
    return portid >> 16 & 0xF, portid >> 8 & 0xFF, portid >> 4 & 0xF, portid >> 24 & 0xF, portid & 0xF, portid >> 20 & 0xF

def huawei_port_itemname(portid):
    return "Card%02d Ctrl%02d Type%02d Ctrl%02d Port%02d %02d" % huawei_port_index(portid)

def inventory_huawei_info(info):
    if opt_debug:
        print info
    if len(info):
        return [(None, {'state': info[0][2]} )]

def check_huawei_info(item, params, info):
    deviceType = { 
        0: 'V1500',
        1: 'V1800',
        2: 'S2100',
        3: 'S2300',
        4: 'S5100',
        5: 'S5300',
        6: 'S5500',
        7: 'S5600',
        8: 'VIS',
        9: 'S2600',
        10: 'S6800E',
        11: 'V1500N',
        12: 'S2300E',
        13: 'COMMON (mixed)',
        15: 'N8000',
        16: 'S6900',
        17: 'S3900',
        18: 'S5500T',
        19: 'S5600T',
        20: 'S6800T',
        21: 'S6900-M100',
        22: 'S3900-M200',
        23: 'S3900-M300',
        24: 'S5900-M100',
        25: 'S8100',
        26: 'S5800T',
        27: 'V1600N',
        28: 'S5900-M200',
        29: 'N8001',
        30: 'S2600T',
        31: 'S8000-I',
        32: 'Dorado5100',
        33: 'T3200',
        34: 'T3500',
        35: 'N8000-R710',
        36: 'N8000-C2',
        40: 'N8000-C2-SYMC',
        42: 'S2900',
        43: 'S2200T',
        44: 'Dorado2100_G2',
        56: 'OceanStor 18500F',
        57: 'OceanStor 18500',
        58: 'OceanStor 18800',
        60: 'Dorado2100',
        61: '6800 V3',
        62: '6900 V3',
        63: '5600 V3',
        64: '5800 V3',
        65: 'T3200',
        66: 'WUSHAN_SQL',
        67: 'WUSHAN_HD',
        68: '5500 V3',
        69: '2600 V3',
        70: '5300 V3',
        401: 'N5000',
        800: 'VIS8200',
        801: 'VIS8400',
        802: 'VIS8600',
        803: 'VIS8800',
    }
    if opt_debug:
        print item
        print params
        print info
    if len(info):
        msg = '%s; serial: %s; version: %s; state: %s' % (deviceType[saveint(info[0][1])],
                                                          info[0][0],
                                                          info[0][3],
                                                          huawei_running_states[info[0][2]])
        res = 0
        if info[0][2] != params['state']:
            msg += ', changed from %s(!!)' % huawei_running_states[params['state']]
            res = 2
        return (res, msg)

check_info['huawei_info'] = {
    'inventory_function'    : inventory_huawei_info,
    'check_function'        : check_huawei_info,
    'service_description'   : 'Huawei Device Info',
    'has_perfdata'          : False,
    'snmp_info'             : ( '.1.3.6.1.4.1.34774.4.1.1', [ '1.0', # deviceId
                                                              '2.0', # deviceType
                                                              '3.0', # status
                                                              '6.0', # version
                                                          ] ),
    'snmp_scan_function'    : lambda oid: oid('.1.3.6.1.4.1.34774.4.1.1.1.0'),
}

def inventory_huawei_capacity(info):
    if opt_debug:
        print info
    if len(info):
        return [('Total Capacity', None)]

def check_huawei_capacity(item, params, info):
    if opt_debug:
        print item
        print params
        print info
    if item == 'Total Capacity':
        used_mb = saveint(info[0][0])
        size_mb = saveint(info[0][1])
        avail_mb = size_mb - used_mb
        return df_check_filesystem_list(item, params, [ (item, size_mb, avail_mb) ])

check_info['huawei_capacity'] = {
    'inventory_function'    : inventory_huawei_capacity,
    'check_function'        : check_huawei_capacity,
    'service_description'   : '%s',
    'has_perfdata'          : True,
    'snmp_info'             : ( '.1.3.6.1.4.1.34774.4.1.1', [ '4.0', # usedCapacity
                                                              '5.0', # totalCapacity
                                                           ] ),
    'snmp_scan_function'    : lambda oid: oid('.1.3.6.1.4.1.34774.4.1.1.4.0'),
    'group'                 : 'filesystem',
    'default_levels_variable': 'filesystem_default_levels',
    'includes':                [ 'df.include' ],
}

def inventory_huawei_controller(info):
    if opt_debug:
        pprint.pprint(info)
    for line in info:
        yield line[0], { 'runningStatus': line[3] }

def check_huawei_controller(item, params, info):
    if opt_debug:
        print item
        print params
        print info
    for name, location, healthStatus, runningStatus, softVer, isMaster, BIOSVer in info:
        if name == item:
            res = 0
            msg = 'Location: %s; software version %s; BIOS version %s; health is %s' % (location, softVer, BIOSVer, huawei_health_states[healthStatus])
            if healthStatus in ['2', '9']:
                res = 2
                msg += '(!!)'
            elif healthStatus != '1':
                res = 1
                msg += '(!)'
            msg += '; running status is %s' % huawei_running_states[runningStatus]
            if runningStatus != params['runningStatus']:
                res = 2
                msg += ', changed from %s(!!)' % huawei_running_states[params['runningStatus']]
            return (res, msg)

check_info['huawei_controller'] = {
    'inventory_function'    : inventory_huawei_controller,
    'check_function'        : check_huawei_controller,
    'service_description'   : 'Controller %s',
    'has_perfdata'          : False,
    'snmp_info'             : ( '.1.3.6.1.4.1.34774.4.1.19.8.12', ['1.2', # hwStorageControllerName
                                                                   '1.3', # hwStorageControllerLocation
                                                                   '1.4', # hwStorageControllerHealthStatus
                                                                   '1.5', # hwStorageControllerRunningStatus
                                                                   '1.6', # hwStorageControllerSoftVer
                                                                   '1.8', # hwStorageControllerIsMaster
                                                                   '1.13', # hwStorageControllerBIOSVer
                                                                 ] ),
    'snmp_scan_function'    : lambda oid: oid('.1.3.6.1.2.1.1.2.0') == '.1.3.6.1.4.1.2011.2.91',
}

def parse_huawei_luns(info):
    luninfo = {}
    for line in info[0]:
        luninfo[line[0]] = line[1:]
    for line in info[1]:
        luninfo[line[0]] += line[1:]
    return luninfo

def inventory_huawei_luns(parsed):
    if opt_debug:
        pprint.pprint(parsed)
    for item in parsed:
        yield item, {}

def check_huawei_luns(item, params, parsed):
    states = {
        '1': 'normal',
        '2': 'fault',
        '3': 'notformat',
        '4': 'formatting',
    }
    if opt_debug:
        print item
        print params
        print parsed
    if item in parsed:
        res = 0
        msg = 'WWN: %s; pool: %s; state: %s' % (parsed[item][0], parsed[item][11], states[parsed[item][1]])
        if parsed[item][2] == '2':
            res = 2
            msg += '(!!)'
        elif parsed[item][2] in ['3', '4']:
            res = 1
            msg += '(!)'
        read_bytes_per_sec = saveint(parsed[item][7]) * 1024 * 1024
        write_bytes_per_sec = saveint(parsed[item][8]) * 1024 * 1024
        iops = saveint(parsed[item][4]) + saveint(parsed[item][5])
        perfdata = [ ( 'read', read_bytes_per_sec ),
                     ( 'write', write_bytes_per_sec ),
                     ( 'ios', iops ),
                 ]
        msg += "; read %s/sec, write %s/sec, IOPS total %s/sec" % (get_bytes_human_readable(read_bytes_per_sec),
                                                                   get_bytes_human_readable(write_bytes_per_sec),
                                                                   iops)
        capacity = saveint(parsed[item][12]) * 1024 * 1024
        perfdata.append( ( 'capacity', "%sB" % capacity ) )
        msg += "; capacity: %s" % get_bytes_human_readable(capacity)

        return (res, msg, perfdata)

check_info['huawei_luns'] = {
    'inventory_function'    : inventory_huawei_luns,
    'check_function'        : check_huawei_luns,
    'parse_function'        : parse_huawei_luns,
    'service_description'   : 'LUN %s',
    'has_perfdata'          : True,
    'snmp_info'             : [ ( '.1.3.6.1.4.1.34774.4.1', [ '19.9.4.1.2',  # hwStorageLunName            
                                                              '19.9.4.1.3',  # hwStorageLunWWN             0
                                                              '19.9.4.1.11', # hwStorageLunStatus          1
                                                              '21.4.1.2',    # hwPerfLunHitRate            2
                                                              '21.4.1.3',    # hwPerfLunTotalIOPS          3
                                                              '21.4.1.4',    # hwPerfLunReadIOPS           4
                                                              '21.4.1.5',    # hwPerfLunWriteIOPS          5
                                                              '21.4.1.6',    # hwPerfLunTotalTraffic       6
                                                              '21.4.1.7',    # hwPerfLunReadTraffic        7
                                                              '21.4.1.8',    # hwPerfLunWriteTraffic       8
                                                              '21.4.1.9',    # hwPerfLunReadIORate         9
                                                              '21.4.1.10',   # hwPerfLunWriteIORate        10
                                                          ], ),
                                ( '.1.3.6.1.4.1.34774.4.1.23.4.8.1', [ '2',  # hwInfoLunName
                                                                       '4',  # hwInfoLunPoolName           11
                                                                       '5',  # hwInfoLunCapacity           12
                                                                       '6',  # hwInfoLunSubscribedCapacity 13
                                                                       '8',  # hwInfoLunSectorSize         14
                                                                   ] ),
                            ],
    'snmp_scan_function'    : lambda oid: oid('.1.3.6.1.2.1.1.2.0') == '.1.3.6.1.4.1.2011.2.91',
    'group'                 : 'disk_io',
}


def inventory_huawei_disk(info):
    if opt_debug:
        pprint.pprint(info)
    for line in info:
        yield line[0], { 'runningStatus': line[2], 'role': line[5], 'interfaceBandwidth': line[7], 'serial': line[12] }

def check_huawei_disk(item, params, info):
    if opt_debug:
        print item
        print params
        print info
    for line in info:
        if line[0] == item:
            res = 0
            msg = "%s %s %s %s" % (get_bytes_human_readable(saveint(line[4])*1024*1024), line[11], line[9], line[12])
            if line[12] != params['serial']:
                res = 1
                msg += '(!)'
            msg += " %s" % line[10]
            msg += "; health %s" % huawei_health_states[line[1]]
            if line[1] in [ '3', '6', '8', '12']:
                res = 1
                msg += '(!)'
            elif line[1] != '1':
                res = 2
                msg += '(!!)'
            msg += '; %s' % huawei_running_states[line[2]]
            if line[2] != params['runningStatus']:
                res = 2
                msg += ', changed from %s(!!)' % huawei_running_states[params['runningStatus']]
            if line[5] != params['role']:
                res = 2
                msg += '; role has changed(!!)'
            msg += '; %d Gbit/s' % (saveint(line[7]) / 1000)
            if line[7] != params['interfaceBandwidth']:
                res = 2
                msg += ', changed from %d Gbit/s(!!)' % (saveint(params['interfaceBandwidth']) / 1000)
            msg += '; %s' % line[13]

            temp = saveint(line[8])
            tempres, tempmsg, perfdata = check_temperature(temp, params)
            if tempres > res:
                res = tempres
            msg += "; %s" % tempmsg
           
            return (res, msg, perfdata)

check_info['huawei_disk'] = {
    'inventory_function'    : inventory_huawei_disk,
    'check_function'        : check_huawei_disk,
    'service_description'   : 'Disk %s',
    'has_perfdata'          : True,
    'snmp_info'             : ( '.1.3.6.1.4.1.34774.4.1.23.5.1.1', [ '4', # 0 hwInfoDiskLocation
                                                                     '2', # 1 hwInfoDiskHealthStatus
                                                                     '3', # 2 hwInfoDiskRunningStatus
                                                                     '5', # 3 hwInfoDiskType
                                                                     '6', # 4 hwInfoDiskCapacity
                                                                     '7', # 5 hwInfoDiskRole
                                                                     '8', # 6 hwInfoDiskSpeed
                                                                     '9', # 7 hwInfoDiskInterfaceBandwidth
                                                                     '11', # 8 hwInfoDiskTemperature
                                                                     '12', # 9 hwInfoDiskModel
                                                                     '13', # 10 hwInfoDiskFirmwareVersion
                                                                     '14', # 11 hwInfoDiskManufacturer
                                                                     '15', # 12 hwInfoDiskSerialNumber
                                                                     '18', # 13 hwInfoDiskDiskDomainName
                                  ] ),
    'snmp_scan_function'    : lambda oid: oid('.1.3.6.1.2.1.1.2.0') == '.1.3.6.1.4.1.2011.2.91',
    'group'                 : 'temperature',
    'includes'              : [ 'temperature.include', ],
}

def parse_huawei_ports(info):
    portinfo = {}
    for line in info:
        if opt_debug:
            print line
        if line[10] != '':
            # FC-Port
            portname = huawei_port_itemname(line[10])
            if portinfo.has_key(portname):
                pprint.pprint(portinfo)
                raise KeyError(portname)
            portinfo[portname] = ['FC'] + line[1:10] + line[10:17]
        elif line[17] != '':
            # SAS-Port
            portname = huawei_port_itemname(line[17])
            if portinfo.has_key(portname):
                pprint.pprint(portinfo)
                raise KeyError(portname)
            portinfo[portname] =  ['SAS'] + line[1:10] + line[17:23]
        elif line[23] != '':
            # iSCSI-Port
            portname = huawei_port_itemname(line[23])
            if portinfo.has_key(portname):
                pprint.pprint(portinfo)
                raise KeyError(portname)
            portinfo[portname] = ['iSCSI'] + line[1:10] + line[23:]
    return portinfo

def inventory_huawei_ports(parsed):
    if opt_debug:
        print "inventory"
        print 
    for port in parsed:
        if opt_debug:
            print parsed[port]
        if parsed[port][11] != '0':
            params = { 'status': parsed[port][11],
                       'logicType': parsed[port][12],
                       }
            if parsed[port][0] == 'FC':
                params.update( { 'configRate': parsed[port][13],
                                 'speedRate': parsed[port][14],
                                 'mode': parsed[port][16],
                                 } )
            if parsed[port][0] == 'SAS':
                params.update( { 'configRate': parsed[port][13],
                                 'speedRate': parsed[port][14],
                                 } )
            if parsed[port][0] == 'iSCSI':
                params.update( { 'ip': parsed[port][13],
                                 'netmask': parsed[port][14],
                                 'bindMode': parsed[port][15],
                                 } )
            yield port, params

def check_huawei_ports(item, params, parsed):
    if opt_debug:
        print item
        print params
        print parsed
    if item in parsed:
        portinfo = parsed[item]
        res = 0
        msg = "%s-Port" % portinfo[0]
        perfdata = []
        #
        # portinfo:
        #
        #	0	type
        #	1	hwPerfPortLocation
        #	2	ReadIOPS
        #	3	WriteIOPS
        #	4	ReadTraffic
        #	5	WriteTraffic
        #	6	PortIfIndex
        #	7	PortType
        #	8	PortStatus
        #	9	PortPhysAddress
        #	10	PortID
        #	11	PortStatus
        #	12	LogicType
        #	13	IP / ConfigRate
        #	14	Mask / SpeedRate
        #	15	BindMode / WWN
        #	16	PortMode
        #
        if portinfo[1] != '':
            msg += " @ %s" % portinfo[1]
        if portinfo[0] in [ 'FC', 'SAS' ]:
            msg += '; WWN: %s' % portinfo[15]
            msg += '; configured rate: %s' % huawei_port_rates[portinfo[13]]
            if portinfo[13] != params['configRate']:
                if res == 0:
                    res = 1
                msg += ', has changed from %s(!)' % huawei_port_rates[params['configRate']]
            msg += '; speed: %s' % huawei_port_rates[portinfo[14]]
            if portinfo[14] != params['speedRate']:
                if res == 0:
                    res = 1
                msg += ', has changed from %s(!)' % huawei_port_rates[params['speedRate']]
            if portinfo[0] == 'FC':
                msg += '; port mode: %s' % huawei_port_modes[portinfo[16]]
                if portinfo[16] != params['mode']:
                    res = 2
                    msg += ', has changed from %s(!!)' % huawei_port_modes[params['mode']]
        if portinfo[0] in [ 'iSCSI' ]:
            msg += "; IP: %s" % portinfo[13]
            if portinfo[13] != params['ip']:
                res = 2
                msg += '(!!)'
            msg += '/%s' % portinfo[14]
            if portinfo[14] != params['netmask']:
                res = 2
                msg += '(!!)'
            if portinfo[9] != '':
                msg += ' %s' % portinfo[9]
        msg += '; state is %s' % huawei_port_states[portinfo[11]]
        if portinfo[11] == '2':
            res = 2
            msg += '(!!)'
        elif portinfo[11] != params['status']:
            res = 1
            msg += ', has changed from %s(!)' % huawei_port_states[params['status']]
        msg += '; type is %s' % huawei_port_logictypes[portinfo[12]]
        if portinfo[12] != params['logicType']:
            res = 2
            msg += ', has changed from %s(!!)' % huawei_port_logictypes[params['logicType']]
        if portinfo[2] != '':
            read_bytes_per_sec = saveint(portinfo[4]) * 1024 * 1024
            write_bytes_per_sec = saveint(portinfo[5]) * 1024 * 1024
            iops = saveint(portinfo[2]) + saveint(portinfo[3])
            perfdata = [ ( 'read', read_bytes_per_sec ),
                         ( 'write', write_bytes_per_sec ),
                         ( 'iops', iops ),
                         ]
            msg += "; read %s/sec, write %s/sec, IOPS total %s/sec" % (get_bytes_human_readable(read_bytes_per_sec),
                                                                       get_bytes_human_readable(write_bytes_per_sec),
                                                                       iops)
        return (res, msg, perfdata)

check_info['huawei_ports'] = {
    'inventory_function'    : inventory_huawei_ports,
    'check_function'        : check_huawei_ports,
    'parse_function'        : parse_huawei_ports,
    'service_description'   : 'Port %s',
    'has_perfdata'          : True,
    'snmp_info'             : ( '.1.3.6.1.4.1.34774.4.1', [ '21.5.1.1',    # 0  hwPerfPortIfIndex
                                                            '21.5.1.11',   # 1  hwPerfPortLocation
                                                            '21.5.1.4',    # 2  hwPerfPortReadIOPS
                                                            '21.5.1.5',    # 3  hwPerfPortWriteIOPS
                                                            '21.5.1.7',    # 4  hwPerfPortReadTraffic
                                                            '21.5.1.8',    # 5  hwPerfPortWriteTraffic
                                                            '19.8.11.1.1', # 6  hwStorageFrontEndHostPortIfIndex
                                                            '19.8.11.1.2', # 7  hwStorageFrontEndHostPortType
                                                            '19.8.11.1.3', # 8  hwStorageFrontEndHostPortStatus
                                                            '19.8.11.1.4', # 9  hwStorageFrontEndHostPortPhysAddress
                                                            '19.8.7.1.3',  # 10 hwStorageFCPortID
                                                            '19.8.7.1.4',  # 11 hwStorageFCPortStatus
                                                            '19.8.7.1.8',  # 15 hwStorageFCPortLogicType
                                                            '19.8.7.1.5',  # 12 hwStorageFCPortConfigRate
                                                            '19.8.7.1.9',  # 16 hwStorageFCPortSpeedRate
                                                            '19.8.7.1.7',  # 14 hwStorageFCPortWWN
                                                            '19.8.7.1.6',  # 13 hwStorageFCPortMode
                                                            '19.8.8.1.3',  # 17 hwStorageSASPortID
                                                            '19.8.8.1.4',  # 18 hwStorageSASPortStatus
                                                            '19.8.8.1.7',  # 21 hwStorageSASPortLogicType
                                                            '19.8.8.1.5',  # 19 hwStorageSASPortConfigRate
                                                            '19.8.8.1.8',  # 22 hwStorageSASPortSpeedRate
                                                            '19.8.8.1.6',  # 20 hwStorageSASPortWWN
                                                            '19.8.9.1.3',  # 23 hwStorageISCSIPortID
                                                            '19.8.9.1.4',  # 24 hwStorageISCSIPortStatus
                                                            '19.8.9.1.8',  # 28 hwStorageISCSIPortLogicType
                                                            '19.8.9.1.5',  # 25 hwStorageISCSIPortIP
                                                            '19.8.9.1.6',  # 26 hwStorageISCSIPortNetMask
                                                            '19.8.9.1.7',  # 27 hwStorageISCSIPortBindMode
                                  ] ),
    'snmp_scan_function'    : lambda oid: oid('.1.3.6.1.2.1.1.2.0') == '.1.3.6.1.4.1.2011.2.91',
}

#
# PSUs
#

#
# Fans
#

#
# Template Code
#

##def inventory_huawei(info):
##    if opt_debug:
##        pprint.pprint(info)

##def check_huawei(item, params, info):
##    if opt_debug:
##        print item
##        print params
##        print info    

##check_info['huawei'] = {
##    'inventory_function'    : inventory_huawei,
##    'check_function'        : check_huawei,
##    'service_description'   : '%s',
##    'has_perfdata'          : False,
##    'snmp_info'             : ( '', [ '', # 
##                                      '', # 
##                                      '', # 
##                                      '', # 
##                                      '', # 
##                                      '', # 
##                                  ] ),
##    'snmp_scan_function'    : lambda oid: oid('.1.3.6.1.2.1.1.2.0') == '.1.3.6.1.4.1.2011.2.91',
##}
