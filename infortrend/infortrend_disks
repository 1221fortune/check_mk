#!/usr/bin/python
# -*- encoding: utf-8; py-indent-offset: 4 -*-

#
# (c) 2013 Heinlein Support GmbH
#          Robert Sander <r.sander@heinlein-support.de>
#

snmp_scan_functions['infortrend_disks'] = lambda oid: oid(".1.3.6.1.4.1.1714.1.6.1.11") != None

snmp_info['infortrend_disks'] = ( ".1.3.6.1.4.1.1714.1.6.1", [ "13", "11" ] )

def inventory_infortrend_disks(info):
    # Debug: lets see how the data we get looks like
    inventory = []
    for slot, status in info:
        inventory.append( (slot, int(status)) )
    return inventory

def check_infortrend_disks(item, params, info):
    status_info = { 
        0   : "New Drive",
        1   : "On-Line Drive",
        2   : "Used Drive",
        3   : "Spare Drive",
        4   : "Drive Initialization in Progress",
        5   : "Drive Rebuild in Progress",
        6   : "Add Drive to Logical Drive in Progress",
        9   : "Global Spare Drive",
        17  : "Drive is in process of Cloning another Drive",
        18  : "Drive is a valid Clone of another Drive",
        19  : "Drive is in process of Copying from another Drive (for Copy/Replace LD Expansion function)",
        63  : "Drive Absent",
        128 : "SCSI Device (Type 0)",
        129 : "SCSI Device (Type 1)",
        130 : "SCSI Device (Type 2)",
        131 : "SCSI Device (Type 3)",
        132 : "SCSI Device (Type 4)",
        133 : "SCSI Device (Type 5)",
        134 : "SCSI Device (Type 6)",
        135 : "SCSI Device (Type 7)",
        136 : "SCSI Device (Type 8)",
        137 : "SCSI Device (Type 9)",
        138 : "SCSI Device (Type 10)",
        139 : "SCSI Device (Type 11)",
        140 : "SCSI Device (Type 12)",
        141 : "SCSI Device (Type 13)",
        142 : "SCSI Device (Type 14)",
        143 : "SCSI Device (Type 15)",
        252 : "Missing Global Spare Drive",
        253 : "Missing Spare Drive",
        254 : "Missing Drive",
        255 : "Failed Drive"
        }
    for slot, status in info:
        status = int(status)
        if slot == item:
            if status not in status_info.keys():
                return (3, "Status is %d" % status)
            if status == 1 or status == 3 or status == 9:
                return (0, status_info[status])
            if status > 19:
                return (2, status_info[status])
            return (1, status_info[status])
    return (3, "not yet implemented")

check_info["infortrend_disks"] = (check_infortrend_disks, "IFT Disk Slot %s", 0, inventory_infortrend_disks)
