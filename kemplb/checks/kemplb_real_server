#!/usr/bin/python
# -*- encoding: utf-8; py-indent-offset: 4 -*-

# (c) 2013 Heinlein Support GmbH
#          Robert Sander <r.sander@heinlein-support.de>

#
# This is free software;  you can redistribute it and/or modify it
# under the  terms of the  GNU General Public License  as published by
# the Free Software Foundation in version 2.  check_mk is  distributed
# in the hope that it will be useful, but WITHOUT ANY WARRANTY;  with-
# out even the implied warranty of  MERCHANTABILITY  or  FITNESS FOR A
# PARTICULAR PURPOSE. See the  GNU General Public License for more de-
# ails.  You should have  received  a copy of the  GNU  General Public
# License along with GNU Make; see the file  COPYING.  If  not,  write
# to the Free Software Foundation, Inc., 51 Franklin St,  Fifth Floor,
# Boston, MA 02110-1301 USA.


# We fetch the following columns from SNMP:
# 2 totRSDesc
# 3 totRSConns
# 4 totRSInPkts
# 6 totRSInBytes
# 8 totRSActiveConns
# 9 totRSInactiveConns

def inventory_kemplb_real_server(info):
    return [ ( line[0], None) for line in info ]

def check_kemplb_real_server(item, _no_params, info):

    import time

    this_time = time.time()

    perf_info = { 1: { 'counter': 'kemplb_rs_conns_%s' % item,
                       'legend': 'Connections/s',
                       'unit': '',
                     },
                  2: { 'counter': "kemplb_rs_packets_%s" % item,
                       'legend': 'Packets/s In',
                       'unit': '',
                     },
                  3: { 'counter': "kemplb_rs_bytes_%s" % item,
                       'legend': 'Bytes/s In',
                       'unit': 'B',
                     },
                  4: { 'counter': "kemplb_rs_aconns_%s" % item,
                       'legend': 'Active Connections',
                       'unit': '',
                     },
                  5: { 'counter': "kemplb_rs_iconns_%s" % item,
                       'legend': 'Inactive Connections',
                       'unit': '',
                     },
                }

    for line in info:
        if line[0] != item: continue

        perfdata = []
        wrapped = False

        for idx in perf_info.keys():
            perf_info[idx]['value'] = saveint(line[idx])

            try:
                timedif, perf_info[idx]['value_per_sec'] = get_counter(perf_info[idx]['counter'], this_time, perf_info[idx]['value'])
                perfdata.append( ( perf_info[idx]['legend'], "%0.3f%s" % (perf_info[idx]['value_per_sec'], perf_info[idx]['unit']) ) )
            except MKCounterWrapped:
                wrapped = True

        if perf_info[2].has_key('value_per_sec'):
            infotext = "%0.1f active connections per second" % ( perf_info[2]['value_per_sec'] )
        else:
            infotext = "Counter has wrapped"

        rc = 0

        return (rc, infotext, perfdata)

    return (3, "Real Server %s not found in SNMP data" % item)

check_info['kemplb_real_server'] = {
    "inventory_function"    : inventory_kemplb_real_server,
    "check_function"        : check_kemplb_real_server,
    "service_description"   : "RS %s",
    "has_perfdata"          : True,
    "snmp_info"             : ( ".1.3.6.1.4.1.12196.12.8.1", [ 2, 3, 4, 6, 8, 9 ] ),
    "snmp_scan_function"    : lambda oid: oid(".1.3.6.1.2.1.1.2.0").startswith(".1.3.6.1.4.1.12196"),
}
