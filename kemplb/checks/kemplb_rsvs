#!/usr/bin/python
# -*- encoding: utf-8; py-indent-offset: 4 -*-

# (c) 2013 Heinlein Support GmbH
#          Robert Sander <r.sander@heinlein-support.de>

#
# This is free software;  you can redistribute it and/or modify it
# under the  terms of the  GNU General Public License  as published by
# the Free Software Foundation in version 2.  check_mk is  distributed
# in the hope that it will be useful, but WITHOUT ANY WARRANTY;  with-
# out even the implied warranty of  MERCHANTABILITY  or  FITNESS FOR A
# PARTICULAR PURPOSE. See the  GNU General Public License for more de-
# ails.  You should have  received  a copy of the  GNU  General Public
# License along with GNU Make; see the file  COPYING.  If  not,  write
# to the Free Software Foundation, Inc., 51 Franklin St,  Fifth Floor,
# Boston, MA 02110-1301 USA.

#
# This check uses the cached data from the kemplb_virtual_server check
# for the names of the virtual servers
#

# We fetch the following columns from SNMP:
# 5  rSidx
# 8  rSstate
# 1  rSvsidx
# 2  rSip
# 3  rSport
# 6  rSforwardingMethod
# 7  rSweight
# 12 rSConns
# 13 rSInPkts
# 15 rSInBytes
# 17 rSActiveConns
# 18 rSInactiveConns

kemplb_rsvs_cache = []
kemplb_rsvs_info = {}

def kemplb_rsvs_read_cache():
    global kemplb_rsvs_cache
    global g_hostname

    if kemplb_rsvs_cache:
        return kemplb_rsvs_cache

    cachefile = tcp_cache_dir + "/" + g_hostname + ".kemplb_virtual_server"

    if os.path.exists(cachefile):
        f = open(cachefile, "r")
        kemplb_rsvs_cache = eval(f.read(10000000))
        f.close()
    else:
        raise MKAgentError("Unable to read cache file %s" % cachefile)
    return kemplb_rsvs_cache

def kemplb_rsvs_item(line):
    global kemplb_rsvs_info

    if not kemplb_rsvs_info:
        virtual_servers = kemplb_rsvs_read_cache()
        for vs in virtual_servers:
            kemplb_rsvs_info[saveint(vs[8])] = vs[3]

    id = saveint(line[2])

    if id in kemplb_rsvs_info:
        return kemplb_rsvs_info[id]
    else:
        raise MKAgentError("ID %s not found in cached data" % id)

def inventory_kemplb_rsvs(info):
    return list( set( [ ( kemplb_rsvs_item(line), None) for line in info ] ))

def check_kemplb_rsvs(item, _no_params, info):
    import time

    this_time = time.time()

    state_info = { 1: 'inService',
                   2: 'outOfService',
                   3: 'failed',
                   4: 'disabled',
                 }

    perf_info = { 7: { 'counter': 'kemplb_rsvs_conns_%s' % item,
                       'legend': 'Connections/s',
                       'unit': '/s',
                     },
                  8: { 'counter': "kemplb_rsvs_packets_%s" % item,
                       'legend': 'Packets/s In',
                       'unit': '/s',
                     },
                  9: { 'counter': "kemplb_rsvs_bytes_%s" % item,
                       'legend': 'Bytes/s In',
                       'unit': 'B/s',
                     },
                 10: { 'counter': "kemplb_rsvs_aconns_%s" % item,
                       'legend': 'Active Connections',
                       'unit': '/s',
                     },
                 11: { 'counter': "kemplb_rsvs_iconns_%s" % item,
                       'legend': 'Inactive Connections',
                       'unit': '/s',
                     },
                }

    conn_info = {}
    perfdata = []
    infotext = []
    rc = 0

    wrapped = False

    for line in info:
        if kemplb_rsvs_item(line) != item: continue


        rSidx = line[0]
        state = saveint(line[1])

        for idx in perf_info.keys():
            perf_info[idx]['value'] = saveint(line[idx])

            try:
                timedif, perf_info[idx]['value_per_sec'] = get_counter(perf_info[idx]['counter'] + '_' + rSidx, this_time, perf_info[idx]['value'])
                perfdata.append( ( perf_info[idx]['legend'] + " " + line[3] + ":" + line[4], "%0.3f%s" % (perf_info[idx]['value_per_sec'], perf_info[idx]['unit']) ) )
            except MKCounterWrapped:
                wrapped = True
                countername = perf_info[idx]['counter'] + '_' + rSidx

        try:
            text = "%s:%s %s %s %s" % ( line[3], line[4], line[5], line[6], state_info[state] )
        except KeyError:
            text = "%s:%s %s %s %s" % ( line[3], line[4], line[5], line[6], line[1] )

        if state == 2:
            rc = 1
            text += " (!)"

        if state == 3:
            rc = 2
            text += " (!!)"

        infotext.append(text)

    if wrapped:
        raise MKCounterWrapped("Counter wrap: " + countername)

    if infotext:
        return (rc, "(%d) %s" % (len(infotext), ", ".join(infotext)))
    else:
        return (3, "RS <=> VS %s not found in SNMP data" % item)

check_info['kemplb_rsvs'] = {
    "inventory_function"    : inventory_kemplb_rsvs,
    "check_function"        : check_kemplb_rsvs,
    "service_description"   : "RSVS %s",
    "has_perfdata"          : False,
    "snmp_info"             : ( ".1.3.6.1.4.1.12196.13.2.1", [ 5, 8, 1, 2, 3, 6, 7, 12, 13, 15, 17, 18 ] ),
    "snmp_scan_function"    : lambda oid: oid(".1.3.6.1.4.1.12196.13.2.1.1.1"),
}
