#!/usr/bin/python
# -*- encoding: utf-8; py-indent-offset: 4 -*-

# (c) 2013 Heinlein Support GmbH
#          Robert Sander <r.sander@heinlein-support.de>

#
# This is free software;  you can redistribute it and/or modify it
# under the  terms of the  GNU General Public License  as published by
# the Free Software Foundation in version 2.  check_mk is  distributed
# in the hope that it will be useful, but WITHOUT ANY WARRANTY;  with-
# out even the implied warranty of  MERCHANTABILITY  or  FITNESS FOR A
# PARTICULAR PURPOSE. See the  GNU General Public License for more de-
# ails.  You should have  received  a copy of the  GNU  General Public
# License along with GNU Make; see the file  COPYING.  If  not,  write
# to the Free Software Foundation, Inc., 51 Franklin St,  Fifth Floor,
# Boston, MA 02110-1301 USA.


# We fetch the following columns from SNMP:
# 2  vSip
# 3  vSport
# 5  vSprotocol 
# 13 vSname
# 14 vSstate
# 16 vSConns
# 17 vSInPkts
# 19 vSInBytes
# 1  vSidx

def inventory_kemplb_virtual_server(info):
    return [ ( line[3], None) for line in info ]

def check_kemplb_virtual_server(item, _no_params, info):

    import time

    state_info = { 1: "inService",
                   2: "outOfService",
                   3: "failed",
                   4: "disabled",
                   5: "sorry",
                   6: "redirect",
                 }

    protocol_info = { 6: "tcp",
                      17: "udp",
                    }

    this_time = time.time()

    perf_info = { 5: { 'counter': 'kemplb_vs_conns_%s' % item,
                       'legend': 'Connections/s',
                       'unit': '',
                     },
                  6: { 'counter': "kemplb_vs_packets_%s" % item,
                       'legend': 'Packets/s In',
                       'unit': '',
                     },
                  7: { 'counter': "kemplb_vs_bytes_%s" % item,
                       'legend': 'Bytes/s In',
                       'unit': 'B',
                     },
                }

    for line in info:
        if line[3] != item: continue

        perfdata = []
        wrapped = False

        for idx in perf_info.keys():
            perf_info[idx]['value'] = saveint(line[idx])

            try:
                timedif, perf_info[idx]['value_per_sec'] = get_counter(perf_info[idx]['counter'], this_time, perf_info[idx]['value'])
                perfdata.append( ( perf_info[idx]['legend'], "%0.3f%s" % (perf_info[idx]['value_per_sec'], perf_info[idx]['unit']) ) )
            except MKCounterWrapped:
                wrapped = True

        vSport = saveint(line[1])
        vSprotocol = saveint(line[2])
        vSstate = saveint(line[4])

        try:
            infotext = "%s://%s:%d %s" % ( protocol_info[vSprotocol], line[0], vSport, state_info[vSstate] )
        except KeyError:
            infotext = "%d://%s:%d %d" % ( vSprotocol, line[0], vSport, vSstate )

        rc = 0
        if vSstate in [3]:
            rc = 2
        if vSstate in [2, 5]:
            rc = 1

        return (rc, infotext, perfdata)

    return (3, "Virtual Server %s not found in SNMP data" % item)

check_info['kemplb_virtual_server'] = {
    "inventory_function"    : inventory_kemplb_virtual_server,
    "check_function"        : check_kemplb_virtual_server,
    "service_description"   : "VS %s",
    "has_perfdata"          : True,
    "snmp_info"             : ( ".1.3.6.1.4.1.12196.13.1.1", [ 2, 3, 5, 13, 14, 16, 17, 19, 1 ] ),
    "snmp_scan_function"    : lambda oid: oid(".1.3.6.1.4.1.12196.13.1.1.1.1"),
}
