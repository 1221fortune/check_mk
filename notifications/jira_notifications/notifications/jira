#!/usr/bin/env python
# JIRA
# -*- encoding: utf-8; py-indent-offset: 4 -*-

# script gets all arguments via environment variables
# the most important are:
# - NOTIFY_PARAMETER_URL
# - NOTIFY_PARAMETER_USERNAME
# - NOTIFY_PARAMETER_PASSWORD
# - NOTIFY_PARAMETER_PROJECT or NOTIFY_CONTACT_JIRAPROJECT
# - NOTIFY_PARAMETER_ISSUETYPE or NOTIFY_CONTACT_JIRAISSUETYPE
# - NOTIFY_PARAMETER_PRIORITY or NOTIFIY_CONTACT_JIRAPRIORITY or not set
# - NOTIFY_PARAMETER_RESOLUTION or NOTIFY_CONTACT_JIRARESOLUTION
# - NOTIFY_PARAMETER_USERNAME or NOTIFY_CONTACT_JIRAUSER as issue reporter
# - NOTIFY_PARAMETER_MONITORING

from jira import JIRA
import sys
import os
from pprint import pprint

custom_fieldnames = { 'HOSTNAME': 'monitoring-host',
                      'SERVICEDESC': 'monitoring-service'
                    }
custom_fields = {}

def get_summary(context):
    notification_type = context["NOTIFICATIONTYPE"]
    message = context['HOSTNAME'] + " "
    if context['WHAT'] == 'SERVICE':
        if notification_type in [ "PROBLEM", "RECOVERY" ]:
            message += context['SERVICESTATE'] + " "
            message += context['SERVICEDESC']
    else:
        if notification_type in [ "PROBLEM", "RECOVERY" ]:
            message += "is " + context['HOSTSTATE']
    return message

def get_description(context):
    if context['WHAT'] == 'SERVICE':
        if context['LONGSERVICEOUTPUT']:
            return context['LONGSERVICEOUTPUT']
        else:
            return context['SERVICEOUTPUT']
    else:
        if context['LONGHOSTOUTPUT']:
            return context['LONGHOSTOUTPUT']
        else:
            return context['HOSTOUTPUT']

context = dict([ (var[7:], value.decode("utf-8")) for (var, value) in os.environ.items() if var.startswith("NOTIFY_")])

jira = JIRA(server=context['PARAMETER_URL'], basic_auth=(context['PARAMETER_USERNAME'], context['PARAMETER_PASSWORD']))

if len(sys.argv) > 1 and sys.argv[1] == '-f':
    pprint(jira.createmeta(projectIds=context['PARAMETER_PROJECT'], expand='projects.issuetypes.fields'))
    sys.exit()

newissue = {
    u'labels': ['monitoring'],
    u'summary': get_summary(context),
    u'description': get_description(context),
}
if 'PARAMETER_PROJECT' in context:
    newissue[u'project'] = {'id': context['PARAMETER_PROJECT']}
if 'CONTACT_JIRAPROJECT' in context:
    newissue[u'project'] = {u'id': context['CONTACT_JIRAPROJECT']}
if 'PARAMETER_ISSUETYPE' in context:
    newissue[u'issuetype'] = {u'id': context['PARAMETER_ISSUETYPE']}
if 'CONTACT_JIRAISSUETYPE' in context:
    newissue[u'issuetype'] = {u'id': context['CONTACT_JIRAISSUETYPE']}
if 'PARAMETER_PRIORITY' in context:
    newissue[u'priority'] = {u'id': context['PARAMETER_PRIORITY']}
if 'CONTACT_JIRAPRIORITY' in context:
    newissue[u'priority'] = {u'id': context['CONTACT_JIRAPRIORITY']}
if 'PARAMETER_USERNAME' in context:
    newissue[u'reporter'] = {u'name': context['PARAMETER_USERNAME']}
if 'CONTACT_JIRAUSER' in context:
    newissue[u'reporter'] = {u'name': context['CONTACT_JIRAUSER']}

metainfo = jira.createmeta(projectIds=newissue['project']['id'], issuetypeIds=newissue['issuetype']['id'], expand='projects.issuetypes.fields')
for project in metainfo.get('projects', []):
    for issuetype in project.get('issuetypes', []):
        for fieldname, fieldinfo in issuetype.get('fields', {}).iteritems():
            for key, name in custom_fieldnames.iteritems():
                if name == fieldinfo['name']:
                    custom_fields[key] = fieldname
newissue[custom_fields['HOSTNAME']] = [context['HOSTNAME']]
if context['WHAT'] == 'SERVICE':
    newissue[custom_fields['SERVICEDESC']] = [context['SERVICEDESC'].replace(' ', '_')]
else:
    newissue[custom_fields['SERVICEDESC']] = 'HOSTISSUE'

pprint(newissue)

if context['NOTIFICATIONTYPE'] == 'PROBLEM':
    issue = jira.create_issue(fields=newissue)
    print issue.permalink()
    if context['WHAT'] == 'SERVICE':
        url = context['PARAMETER_MONITORING'] + context['SERVICEURL']
    else:
        url = context['PARAMETER_MONITORING'] + context['HOSTURL']
    print type(url), url
    rl = jira.add_simple_link(issue, {'url': url,
                                      'title': 'Monitoring'})
    print rl
elif context['NOTIFICATIONTYPE'] == 'RECOVERY':
    query = 'project = "%s" AND issuetype = "%s" and labels = "%s"' % (
        newissue['project']['id'],
        newissue['issuetype']['id'],
        ",".join(newissue['labels']))
    query += ' and %s = "%s" and resolution is EMPTY' % (
        custom_fieldnames['HOSTNAME'],
        ",".join(newissue[custom_fields['HOSTNAME']]))
    query += ' and %s = "%s"' % (
        custom_fieldnames['SERVICEDESC'],
        ",".join(newissue[custom_fields['SERVICEDESC']]))
    print query

    resolution = 0
    if 'PARAMETER_RESOLUTION' in context:
        resolution = context['PARAMETER_RESOLUTION']
    if 'CONTACT_JIRARESOLUTION' in context:
        resolution = context['CONTACT_JIRARESOLUTION']

    for issue in jira.search_issues(query):
        pprint(issue)
        print issue.permalink()
        # pprint(jira.editmeta(issue))
        # pprint(jira.transitions(issue))
        pprint(jira.transition_issue(issue, resolution, comment=newissue['description']))
        
# i = jira.issue('TESTSD-11', fields='labels,summary,description,priority,reporter')
# pprint(i.raw)


#pprint(jira.search_users('y.minagawa'))
