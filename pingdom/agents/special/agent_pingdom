#!/usr/bin/env python
# -*- encoding: utf-8; py-indent-offset: 4 -*-

#
# (C) 2015 Heinlein Support GmbH
# Robert Sander <r.sander@heinlein-support.de>
#

import pingdom
from ConfigParser import SafeConfigParser
import argparse
import datetime
import sys
import urllib2
import os
import cPickle
from pprint import pprint, pformat

class Check_Pingdom(pingdom.Pingdom):
    def __init__(self, url=pingdom.API_URL, username=None, password=None, appkey=None, accountemail=None):
        self.accountemail = accountemail
        if os.environ.has_key('OMD_ROOT'):
            self.cachedir = os.environ['OMD_ROOT'] + '/tmp/check_mk/agent_pingdom'
        else:
            self.cachedir = '/tmp/check_mk/agent_pingdom'
        if not os.path.isdir(self.cachedir):
            os.makedirs(self.cachedir)
        super(Check_Pingdom, self).__init__(url=url, username=username, password=password, appkey=appkey)

    def method(self, url, method="GET", parameters=None):
        if parameters:
            data = pingdom.urlencode(parameters)
        else:
            data = None
        method_url = pingdom.urljoin(self.url, url)
        if method == "GET" and data:
            method_url = method_url+'?'+data
            req = self.RequestWithMethod(method_url, http_method=method, data=None)
        else:
            req = self.RequestWithMethod(method_url, http_method=method, data=data)
        req.add_header('App-Key', self.appkey)
        if self.accountemail:
            req.add_header('Account-Email', self.accountemail)
        response = self.opener.open(req).read()
        return pingdom.json.loads(response)

    def get_check_info(self, id):
        checkfile = os.path.join(self.cachedir, str(id))
        now = datetime.datetime.utcnow()
        if os.path.isfile(checkfile):
            checkinfo = cPickle.load(open(checkfile, 'rb'))
            resolution = checkinfo['resolution'] * 60
            nextcheck = datetime.datetime.utcfromtimestamp(checkinfo['lasttesttime'] + resolution)
        else:
            nextcheck = now
        if nextcheck <= now:
            try:
                checkinfo = self.method('checks/%s' % id)['check']
            except urllib2.HTTPError, er:
                print "Unable to query Pingdom API: %s" % er
                sys.exit(3)
            cPickle.dump(checkinfo, open(checkfile, 'wb'), -1)
        return checkinfo

    def create_url(self, checkinfo):
        url = None
        if type(checkinfo['type']) is unicode:
            return checkinfo['type']
        if checkinfo['type'].has_key('http'):
            if checkinfo['type']['http']['encryption']:
                proto = 'https'
            else:
                proto = 'http'
            url = "%s://%s:%s%s" % (proto,
                                    checkinfo['hostname'],
                                    checkinfo['type']['http']['port'],
                                    checkinfo['type']['http']['url'])
        elif checkinfo['type'].has_key('ping'):
            url = "ping://%s" % checkinfo['hostname']
        elif checkinfo['type'].has_key('smtp'):
            if checkinfo['type']['smtp']['encryption']:
                proto = 'smtps'
            else:
                proto = 'smtp'
            url = "%s://%s:%s" % (proto,
                                  checkinfo['hostname'],
                                  checkinfo['type']['smtp']['port'])
        elif checkinfo['type'].has_key('dns'):
            url = "dns://%s via %s" % (checkinfo['hostname'],
                                       checkinfo['type']['dns']['nameserver'])
        elif checkinfo['type'].has_key('tcp'):
            url = "tcp://%s:%s" % (checkinfo['hostname'],
                                   checkinfo['type']['tcp']['port'])
        return url

    def list_checks(self):
        checks = {}
        for check in self.method('checks')['checks']:
            checks[check['id']] = check
        return checks

    def check_pingdom_info(self, checkinfo, warning, critical):
        rc = 3
        perfdata = ''

        url = self.create_url(checkinfo)
        if not url:
            return(rc, pformat(checkinfo), perfdata)

        exclamation=''
        if checkinfo['status'] == 'up' or checkinfo['status'] == 'paused':
            rc = 0
        if checkinfo['status'] == 'unconfirmed_down':
            rc = 1
            exclamation=' (!)'
        elif checkinfo['status'] == 'down':
            rc = 2
            exclamation=' (!!)'

        msg = ''
        if checkinfo.has_key('lastresponsetime'):
            perfdata = "time=%dms;" % checkinfo['lastresponsetime']
            msg = ""
            if warning:
                perfdata += "%d" % warning
                if checkinfo['lastresponsetime'] > warning:
                    rc = 1
                    msg = ", response time too high (!)"
            perfdata += ";"
            if critical:
                perfdata += "%d" % critical
                if checkinfo['lastresponsetime'] > critical:
                    rc = 2
                    msg = ", response time too high (!!)"

        return (rc,
                "%s (%s) is %s%s at %s UTC%s" % (checkinfo['name'],
                                                 url,
                                                 checkinfo['status'],
                                                 exclamation,
                                                 datetime.datetime.utcfromtimestamp(checkinfo['lasttesttime']).isoformat(' '),
                                                 msg),
                perfdata)

    def check_pingdom(self, id, warning, critical):
        checkinfo = self.get_check_info(id)
        return self.check_pingdom_info(checkinfo, warning, critical)

if __name__ == "__main__":

    #
    # read cmdline arguments
    #

    parser = argparse.ArgumentParser()
    parser.add_argument('-u', '--username', required=False, help='name of the Pingdom user')
    parser.add_argument('-p', '--password', required=False)
    parser.add_argument('-a', '--api-key', required=False, help='Pingdom API key')
    parser.add_argument('-e', '--email', required=False, help='Pingdom account email (for team accounts)')
    parser.add_argument('--config', required=False, help='Path to configuration file')
    subparsers = parser.add_subparsers(title='available commands', help='call "subcommand --help" for more information')
    agent = subparsers.add_parser('agent', help='checks all available Pingdom checks, use as Check_MK special agent')
    agent.set_defaults(func='agent')
    check = subparsers.add_parser('check', help='check a Pingdom ID')
    check.set_defaults(func='check')
    check.add_argument('-i', '--id', type=int, required=True, help='ID of the Pingdom Check')
    check.add_argument('-w', '--warning', type=int, required=False, help='warning threshold for response time in milliseconds')
    check.add_argument('-c', '--critical', type=int, required=False, help='critical threshold for response time in milliseconds')
    listchecks = subparsers.add_parser('list', help='list Pingdom checks')
    listchecks.set_defaults(func='list')
    args = parser.parse_args()

    if args.config:
        cfg = SafeConfigParser()
        cfg.read(args.config)
        if args.email:
            email=args.email
        elif cfg.has_option('credentials', 'email'):
            email=cfg.get('credentials', 'email')
        else:
            email=None
        p = Check_Pingdom(username=cfg.get('credentials', 'username'),
                          password=cfg.get('credentials', 'password'),
                          appkey=cfg.get('credentials', 'appkey'),
                          accountemail=email)
    elif args.username and args.password and args.api_key:
        p = Check_Pingdom(username=args.username,
                          password=args.password,
                          appkey=args.api_key,
                          accountemail=args.email)
    else:
        raise RuntimeError('No Credentials specified')

    if args.func == 'list':
        for id, checkinfo in p.list_checks().iteritems():
            # fetch detailed check info
            checkinfo = p.get_check_info(id)
            url = p.create_url(checkinfo)
            if url:
                print "%d %s %s" % (id,
                                    url,
                                    checkinfo['name'])
            else:
                print id, 'unknown Pingdom check "%s" on host %s: %s' % (checkinfo['name'],
                                                                         checkinfo['hostname'],
                                                                         checkinfo['type'])
    elif args.func == 'check':
        (rc, msg, perfdata) = p.check_pingdom(args.id, args.warning, args.critical)
        if perfdata:
            print "%s | %s" % (msg, perfdata)
        else:
            print msg
        sys.exit(rc)
    elif args.func == 'agent':
        hosts = {}
        checks = p.list_checks()
        for id, checkinfo in checks.iteritems():
            if not hosts.has_key(checkinfo['hostname']):
                hosts[checkinfo['hostname']] = []
            hosts[checkinfo['hostname']].append(checkinfo)

        print "<<<check_mk>>>"
        print "Version: %s" % p.url.split('/')[-2]
        print "AgentOS: REST %s" % p.url

        print "<<<local>>>"
        print "0 Number_of_Checks checks=%d %d check%s collected via Pingdom API" % (len(checks),
                                                                                     len(checks),
                                                                                     '' if len(checks) == 1 else 's')

        for hostname, checks in hosts.iteritems():
            print "0 Pingdom_%s checks=%d %d check%s on %s: %s" % (hostname,
                                                                   len(checks),
                                                                   len(checks),
                                                                   '' if len(checks) == 1 else 's',
                                                                   hostname,
                                                                   ", ".join(map(lambda x: x['name'], checks)))

        for hostname, checks in hosts.iteritems():
            print '<<<<%s>>>>' % hostname
            print '<<<local>>>'
            for checkinfo in checks:
                (rc, msg, perfdata) = p.check_pingdom_info(checkinfo, False, False)
                print '%d Pingdom_%d %s %s' % (rc, checkinfo['id'], perfdata, msg)
        print '<<<<>>>>'
