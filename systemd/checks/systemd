#!/usr/bin/env python
# -*- encoding: utf-8; py-indent-offset: 4 -*-

# (c) 2017 Heinlein Support GmbH
#          Robert Sander <r.sander@heinlein-support.de>

# This is free software;  you can redistribute it and/or modify it
# under the  terms of the  GNU General Public License  as published by
# the Free Software Foundation in version 2.  This file is distributed
# in the hope that it will be useful, but WITHOUT ANY WARRANTY;  with-
# out even the implied warranty of  MERCHANTABILITY  or  FITNESS FOR A
# PARTICULAR PURPOSE. See the  GNU General Public License for more de-
# ails.  You should have  received  a copy of the  GNU  General Public
# License along with GNU Make; see the file  COPYING.  If  not,  write
# to the Free Software Foundation, Inc., 51 Franklin St,  Fifth Floor,
# Boston, MA 02110-1301 USA.

inventory_systemd_rules = []

def inventory_systemd(info):
    # Handle single entries (type str)
    def add_matching_units(name, description, state, sub, entry):
        unit = entry[0]
        statespec = entry[1]

        if unit:
            if unit.startswith("~"):
                r = regex(unit[1:])
                if not r.match(name) and not r.match(description):
                    return []
            elif unit != name and unit != description:
                return []

        if (statespec and statespec != state):
            return []

        return [(name, {'state': state, 'sub': sub})]

    # Filter WATO compatible rules by tags/hostlist
    rules = []
    for rule in inventory_systemd_rules:
        # 1. Get all rules matching the current host
        taglist, hostlist = rule[1:3]
        if not hosttags_match_taglist(tags_of_host(host_name()), taglist) \
           or not in_extraconf_hostlist(hostlist, host_name()):
            continue

        # 2. Now extract the list of service regexes
        value = rule[0]
        units = value.get('units', [])
        state = value.get('state', None)
        if units:
            for unit in units:
                rules.append(('~' + unit, state))
        else:
            rules.append((None, state))

    inventory = []
    for line in info:
        if line[2] == 'loaded':
            for rule in rules:
                inventory += add_matching_units(line[1], " ".join(line[5:]), line[3], line[4], rule)
                
    return inventory

def check_systemd(item, params, info):
    found = []
    for line in info:
        description = " ".join(line[5:])
        if line[1] == item or item == description:
            found.append((line[0], line[3], line[4], description))
    if found:
        best_desc, best_state, best_info, best_running_on = None, None, None, None
        for running_on, state, sub, desc in found:
            this_state = 0
            if state != params.get('state'):
                this_state = 2
            if sub != params.get('sub'):
                this_state = 2
            if best_state == None or this_state < best_state:
                best_state = this_state
                best_info = sub
                best_running_on = running_on
                best_desc = desc
        infotext = best_desc + ": %s" % best_info
        if best_running_on and best_state != 2:
            infotext += " (running on: %s)" % best_running_on
        return best_state, infotext

check_info['systemd'] = {
    'inventory_function':  inventory_systemd,
    'check_function':      check_systemd,
    'service_description': "Systemd Unit %s",
    'node_info':        True,
    'group':               'systemd',
    'default_levels_variable': 'systemd_default_levels',
}
